using Xunit;

namespace Aoc2021.Tests;

public class Day18Tests {
  [Fact]
  public void TestPart1() {
    var assertions = new[] {
      ("Tests/Inputs/18_1.txt", 4140)
    };
    assertions.ForEach(((string Input, int Expected) x) =>
      Assert.Equal(x.Expected, Day18.Part1(File.ReadAllText(x.Input).SplitLines())));
  }

  [Fact]
  public void TestPart2() {
    var assertions = new[] {
      ("Tests/Inputs/18_1.txt", 3993)
    };
    assertions.ForEach(((string Input, int Expected) x) =>
      Assert.Equal(x.Expected, Day18.Part2(File.ReadAllText(x.Input).SplitLines())));
  }

  [Fact]
  public void TestParse() {
    var lines = File.ReadAllText("Tests/Inputs/18_1.txt").SplitLines();
    lines.ForEach(line => {
      var index = 0;
      Assert.Equal(line, Day18.ParsePair(line, ref index).ToString());
    });
  }

  [Fact]
  public void TestAdd() {
    var assertions = new[] {
      ("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]", "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"),
      ("[1,2]", "[[3,4],5]", "[[1,2],[[3,4],5]]")
    };
    assertions.ForEach(((string Left, string Right, string Result) x) => {
      var index = 0;
      var left = Day18.ParsePair(x.Left, ref index);
      index = 0;
      var right = Day18.ParsePair(x.Right, ref index);

      Assert.Equal(x.Result, Day18.Add(left, right).ToString());
    });
  }

  [Fact]
  public void TestReduce() {
    var assertions = new[] {
      (new[] { "[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]" }, "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
      (new[] { "[1,1]", "[2,2]", "[3,3]", "[4,4]" }, "[[[[1,1],[2,2]],[3,3]],[4,4]]"),
      (new[] { "[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]" }, "[[[[3,0],[5,3]],[4,4]],[5,5]]"),
      (new[] { "[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]", "[6,6]" }, "[[[[5,0],[7,4]],[5,5]],[6,6]]"),
      (new[] {
        "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
        "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]"
      }, "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"),
      (new[] {
        "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
        "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]"
      }, "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"),
      (new[] {
        "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
        "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]"
      }, "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"),
      (new[] {
        "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
        "[7,[5,[[3,8],[1,4]]]]"
      }, "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"),
      (new[] {
        "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
        "[[2,[2,2]],[8,[8,1]]]"
      }, "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"),
      (new[] { "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]", "[2,9]" },
        "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"),
      (new[] { "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]", "[1,[[[9,3],9],[[9,0],[0,7]]]]" },
        "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"),
      (new[] {
        "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
        "[[[5,[7,4]],7],1]"
      }, "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"),
      (new[] {
        "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
        "[[[[4,2],2],6],[8,7]]"
      }, "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
      (new[] {
        "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
        "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
        "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
        "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
        "[7,[5,[[3,8],[1,4]]]]",
        "[[2,[2,2]],[8,[8,1]]]",
        "[2,9]",
        "[1,[[[9,3],9],[[9,0],[0,7]]]]",
        "[[[5,[7,4]],7],1]",
        "[[[[4,2],2],6],[8,7]]"
      }, "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"),
      (new[] {
        "[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]",
        "[[[5,[2,8]],4],[5,[[9,9],0]]]",
        "[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]",
        "[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]",
        "[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]",
        "[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]",
        "[[[[5,4],[7,7]],8],[[8,3],8]]",
        "[[9,3],[[9,9],[6,[4,9]]]]",
        "[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]",
        "[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"
      }, "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]")
    };
    assertions.ForEach(((string[] List, string Result) x) => {
      var index = 0;
      var result = x.List
        .Skip(1)
        .Aggregate(
          Day18.ParsePair(x.List[0], ref index),
          (left, line) => {
            var idx = 0;
            var right = Day18.ParsePair(line, ref idx);
            var pair = Day18.Add(left, right);
            Day18.Reduce(pair);

            return pair;
          }).ToString();

      Assert.Equal(x.Result, result);
    });
  }

  [Fact]
  public void TestMagnitude() {
    var assertions = new[] {
      ("[9,1]", 29),
      ("[1,9]", 21),
      ("[[9,1],[1,9]]", 129),
      ("[[1,2],[[3,4],5]]", 143),
      ("[[1,2],[[3,4],5]]", 143),
      ("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384),
      ("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445),
      ("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791),
      ("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137),
      ("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488),
      ("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", 4140)
    };
    assertions.ForEach(((string Input, int Magnitude) x) => {
      var index = 0;
      Assert.Equal(x.Magnitude, Day18.GetValue(Day18.ParsePair(x.Input, ref index)));
    });
  }

  [Fact]
  public void TestExplode() {
    var assertions = new[] {
      ("[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]"),
      ("[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]"),
      ("[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]"),
      ("[[3,[2,[1,[7,3]]]],0]", "[[3,[2,[8,0]]],3]"),
      ("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")
    };
    assertions.ForEach(((string Input, string Result) x) => {
      var index = 0;
      var pair = Day18.ParsePair(x.Input, ref index);
      Day18.Reduce(pair);

      Assert.Equal(x.Result, pair.ToString());
    });
  }

  [Fact]
  public void TestSplit() {
    var assertions = new[] {
      ("10", "[5,5]"),
      ("11", "[5,6]"),
      ("12", "[6,6]"),
      ("15", "[7,8]"),
      ("13", "[6,7]"),
      ("18", "[9,9]")
    };
    assertions.ForEach(((string Input, string Result) x) => {
      var index = 0;
      var number = Day18.ParseNumber(x.Input, ref index);
      var split = Day18.Split(number);

      Assert.True(split);;
      Assert.NotNull(number.Parent);
      Assert.Equal(x.Result, number.Parent?.ToString());
    });
  }
}
